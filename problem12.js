/*
Highly divisible trianglular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would
be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/


// * Given any number (num) retrieve said triangle number.
const nthTriangleNumber = num => num === 1 ? 1 : num + nthTriangleNumber(num - 1);

// * Working brute force solution. It takes a long time to run.
// * See below for more efficient solution.
// * Given any number (num) retrive the number of Divisors it has.
const numberOfDivisiors = (num) => {
  // * An array containing ever divisor. It starts at with both 1 and the number since every number greater
  // * than 1 has at least 2 divisiors.
  const divisors = [1, num];
  // * Iteration from 2 until we get to the number.
  for (let i = 2; i < num; i ++) {
    // * Check if the number is evenly divisible by i.
    if (num % i === 0) {
      // * if it is push it into the array.
      divisors.push(i);
    }
  }
  // * Lastly return the length of the divisors.
  return divisors.length;
}

// * More time efficient solution using knowledge about divisiors explained in problem 3.
// * Given any number gets the number of divisors.
const numOfDivs = (num) => {
  // * An array containing all the divisiors of a number. Starts with either just 1 or 1 and the number.
  const divisors = num === 1 ? [1] : [1, num];
  // * The upper limit that we will use to break out of our loop. It is originally set to the number.
  let limit = num;

  // * Loop starts the same as the solution above but gets progressively smaller.
  for (let i = 2; i < limit; i++) {
    // * We still check to make sure the number can be divided by i.
    if (num % i === 0) {
      // * We still push in i to the divisiors.
      divisors.push(i);
      // * We now also push in the number that results from num / i since it is also a divisior.
      divisors.push(num / i);
      // * Because factors come in low-high pairs (see problem3.js for details) we can change the limit for the
      // * loop every time we find a successful pair.
      limit = num / i;
    }
  }
  // * Still returning the length of the divisiors.
  return divisors.length;
}

let i = 1;
let tirangleNumber = 1;
while (numOfDivs(tirangleNumber) <= 500) {
  i++;
  tirangleNumber = nthTriangleNumber(i);
}

console.log(tirangleNumber);