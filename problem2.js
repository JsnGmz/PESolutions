/*
Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. 

*/

// The Fibonacci Sequence starts with 1 and 2.
const fibonacciNums = [1, 2];

// We keep adding the last two indecies in the array until they are greater than 4 million.
while (fibonacciNums[fibonacciNums.length - 2] + fibonacciNums[fibonacciNums.length - 1] <= 4000000) {
  fibonacciNums.push(fibonacciNums[fibonacciNums.length - 2] + fibonacciNums[fibonacciNums.length - 1]);
}

// fibonacciNum should now look like this: [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578]

// We now want to find the sum of the even numbers. To do this we can filter them out.
// All even numbers are divisible by 2 and should have a remainder of 0.
const evenNumbers = fibonacciNums.filter((number) => number % 2 === 0);

// evenNumbers should look like this: [2, 8, 34, 144, 610, 2584, 10946, 46368, 196418, 832040, 3524578]

// We can then apply the same reduce method as in problem 1 to get the sum.

const reducer = (accumulator, currentValue) => accumulator + currentValue;

console.log(evenNumbers.reduce(reducer));